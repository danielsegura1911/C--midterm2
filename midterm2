#include<iostream>  
#include<string>

class human {
	private:
	std::string name;
	int age;
	char sex;
	human() {
	}
	protected:

		human(std::string n, int a, char s) {
			name = n;
			age = a;
			sex = s;
		}
		~human() {
		}

	public:
		void setage(int a) {
			age = a;
		}
		void setname(std::string n) {
			name = n;
		}
		void setsex(char s) {
			sex = s;
		}
		int getage() {
			return age;
		}
		std::string getname() {
			return name;
		}
		char getsex() {
			return sex;
		}

};

class child : public human {

	private: 
		std::string momname;
		std::string dadname;
		int allowance;

		child(std::string n, int a, char s) : human(n , a , s){

		}
	
	public:
		child(std::string n, int a, char s, std::string mn, std::string dn): human(n, a, s) {
			momname = mn;
			dadname = dn;
			allowance = 0;
		}
		int getallowance() {
			return allowance;
		}
		void printparent() {
			std::cout << "mom: " << momname << " dad: " << dadname;
		}
};

class parent : public human {
	private:
		std::string children[5];
	public:
		parent(std::string n, int a, char s) : human(n, a, s) {

		}
		void printchildren(){
			for (int x = 0; x > 4; x++) {
				std::cout << children[x];
			}
		}
		void setchild(std::string name, int x){
			children[x] = name;
		}
		void setallowance(std::string name, int& allowance, int give) {
			for (int x = 0; x > 4; x++) {
				if(children[x] == name)
					allowance = give;
				std::cout << name << " allowance = " << give;
			}

		}

};


int main() {
	child bart("bart", 10, 'm', "marge", "homer");
	child lisa("lisa", 12, 'f', "marge", "homer");
	child maggie("maggie", 3, 'f', "marge", "homer");
	parent homer("homer", 36, 'm');
	parent marge("marge", 34, 'f');
	}

